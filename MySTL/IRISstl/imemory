#ifndef _IMEMORY_
#define _IMEMORY_
#include <itype_traits>
#include <imacros>s

_IRIS_BEGIN
template <class _iTy, class... _Types>
_IRIS_CXX20_CONSTEXPR void _Construct_placed(_iTy& _Obj, _Types&&... _Args) noexcept {
	::new (static_cast<void*>(_IRIS_ADDRSOF(_Obj))) _iTy(_IRIS forward<_Types>(_Args)...);
}

template <class _SizedType>
_IRIS_CXX20_CONSTEXPR _SizedType* _Allocate(isize_t _Blocks) {
	void* _Raw_mem = operator new(_Blocks * sizeof(_SizedType));
	return static_cast<_SizedType*>(_Raw_mem);
}
_IRIS_END
#endif // _IMEMORY_
