#ifndef _IMATH_
#define _IMATH_
#include <imacros>
#include <iexceptions>

_IRIS_BEGIN
long double abs(const long double& _Num) {
	return (_Num < 0) ? -_Num : _Num;
}

long double sqrt(const long double& _Num) {
	if (_Num < 0) throw _IRIS neg_sqrt("Negative number provided on sqrt");
	if (_Num == 0 || _Num == 1) return _Num;

	long double _epsilon = 0.0000000000000001;
	long double _X = _Num;

	while (true) {
		long double _Next_X = 0.5 * (_X + _Num / _X);
		if (abs(_Next_X - _X) < _epsilon) {
			break;
		}
		_X = _Next_X;
	}

	return _X;
}

long double atan(const long double& _X) {
	long double result = _X;
	long double _X2	   = _X * _X;
	long double term   = _X;
	bool _Neg		   = false;

	for (int i = 3; i <= 19; i += 2) {
		term *= _X2;
		result += (_Neg ? -1 : 1) * term / i;
		_Neg = !_Neg;
	}

	return result;
}

long double atan2(const long double& _X, const long double& _Y) {
	if (_X > 0) return atan(_Y / _X);
	else if (_X < 0 && _Y >= 0) return atan(_Y / _X) + I_PI;
	else if (_X < 0 && _Y < 0) return atan(_Y / _X) - I_PI;
	else if (_X == 0 && _Y != 0) return (_Y > 0) ? I_PI / 2 : -I_PI / 2;
	else return 0;
}
_IRIS_END
#endif // _IMATH_
