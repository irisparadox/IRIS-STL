#ifndef _IEXCEPTIONS_
#define _IEXCEPTIONS_
#include <imacros>

_IRIS_BEGIN
using size_type = isize_t;

class exception {
public:
	exception() {
		_Mymsg[0] = '\0';
	}

	exception(const char* _Msg) {
		size_type i = 0;

		while (_Msg[i] != '\0' && i < _Max_size - 1) {
			_Mymsg[i] = _Msg[i];
			i++;
		}

		_Mymsg[i] = '\0';
	}

	const char* what() const {
		return _Mymsg;
	}

private:
	static const size_type _Max_size = 256;
	char _Mymsg[_Max_size];
};

class not_in_range	  : public exception {
public:
	not_in_range(const char* _Msg)	  : exception(_Msg) {}
};
class empty_container : public exception {
public:
	empty_container(const char* _Msg) : exception(_Msg) {}
};

class neg_sqrt		  : public exception {
public:
	neg_sqrt(const char* _Msg)		  : exception(_Msg) {}
};
_IRIS_END
#endif // _IEXCEPTIONS_
